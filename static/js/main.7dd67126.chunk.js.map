{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","phone","website","company","address","useState","isShown","setIsShown","onMouseEnter","onMouseLeave","className","alt","src","bs","href","street","suite","city","zipcode","CardList","robots","StrictMode","map","val","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","console","log","filteredRobots","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":";6PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCyESC,EA3DF,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,GAAIC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAAc,EACtCC,oBAAS,GAD6B,mBAC7DC,EAD6D,KACpDC,EADoD,KAUpE,OACI,yBAAKC,aAAc,kBAAMD,GAAW,IAAOE,aAAc,kBAAMF,GAAW,IAAQG,UAAU,mDACxF,yBAAKA,UAAU,QACX,6BACI,yBAAKC,IAAI,SAASC,IAAG,+BAA0BZ,EAA1B,uBACrB,4BAAKF,GACL,2BAAIC,IAGPO,GACG,yBAAKI,UAAU,aAEX,uBAAGA,UAAU,SAAb,WACA,uBAAGA,UAAU,OAAOP,EAAQL,MAC5B,uBAAGY,UAAU,OAAOP,EAAQU,IAC5B,uBAAGH,UAAU,OAAOT,GACpB,uBAAGS,UAAU,MAAMI,KAAMrB,OAAOC,SAASoB,MAAOZ,GAChD,uBAAGQ,UAAU,SAAb,WACA,uBAAGA,UAAU,OAAON,EAAQW,QAC5B,uBAAGL,UAAU,OAAON,EAAQY,OAC5B,uBAAGN,UAAU,OAAON,EAAQa,MAC5B,uBAAGP,UAAU,OAAON,EAAQc,aCgCrCC,EAxBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BACI,kBAAC,IAAMC,WAAP,KAEQD,EAAOE,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLxB,GAAIoB,EAAOI,GAAGxB,GACdF,KAAMsB,EAAOI,GAAG1B,KAChBC,MAAOqB,EAAOI,GAAGzB,MACjBE,MAAOmB,EAAOI,GAAGvB,MACjBC,QAASkB,EAAOI,GAAGtB,QACnBC,QAASiB,EAAOI,GAAGrB,QACnBC,QAASgB,EAAOI,GAAGpB,gBCxEpCsB,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKjB,UAAU,OACX,2BACIA,UAAU,mCACVkB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGXI,G,MATA,SAACC,GAEZ,OACI,yBAAKtB,UAAU,kBAAkBuB,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACjEH,EAAMI,YCiDJC,G,wDA/CX,aAAgB,IAAD,8BACX,gBAiBJC,eAAiB,SAACC,GAEd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAlBzC,EAAKC,MAAQ,CACTxB,OAAQ,GACRqB,YAAa,IAJN,E,gEASO,IAAD,OACjBI,MAAO,8CACFC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACpB,OAAQ6B,OAG3CC,QAAQC,IAAI,wC,+BAQL,IAAD,OACAC,EAAiBC,KAAKT,MAAMxB,OAAOkC,QAAO,SAAAlC,GAC5C,OAAQA,EAAOtB,KAAKyD,cAAcC,SAAS,EAAKZ,MAAMH,YAAYc,gBAClEnC,EAAOrB,MAAMwD,cAAcC,SAAS,EAAKZ,MAAMH,YAAYc,kBAI/D,OAAiC,IAA7BF,KAAKT,MAAMxB,OAAOqC,OACX,wBAAI/C,UAAU,MAAd,2GAIH,yBAAKA,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWiB,aAAc0B,KAAKf,iBAE9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAQgC,U,GAzCxBM,cCKlBC,IAASC,OACP,6BACE,kBAAC,IAAMvC,WAAP,KACE,kBAAC,EAAD,QAGJwC,SAASC,eAAe,SNgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.7dd67126.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from \"react\";\r\n\r\n//! 1st way - w/o destructuring\r\n// const Card = (props) => {\r\n//     return (\r\n//         <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n//             <img alt=\"robots\" src={`https://robohash.org/${props.id}.png?size=200x200`}/>\r\n//             <div>\r\n//                 <h2>{props.name}</h2>\r\n//                 <p>{props.email}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n// export default Card;\r\n\r\n//! 2nd way - w/ destructuring\r\n// const Card = (props) => {\r\n//     const { name, email, id } = props;\r\n//     return (\r\n//         <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n//             <img alt=\"robots\" src={`https://robohash.org/${id}.png?size=200x200`}/>\r\n//             <div>\r\n//                 <h2>{name}</h2>\r\n//                 <p>{email}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n// export default Card;\r\n\r\n//! 3rd way - w/ destructuring in the function props\r\nconst Card = ({ name, email, id, phone, website, company, address }) => {\r\n    const [isShown, setIsShown] = useState(false);\r\n    // const showElement = () => {\r\n    //     setIsShown(true);\r\n    //     // document.getElementsByClassName(\"element\").style.display = \"flex\";\r\n    // }\r\n    // const flexOn = () => {\r\n    //     let zxc = document.getElementsByClassName(\"element\").style.display = \"flex\";\r\n    //     return zxc;\r\n    // }\r\n    return (\r\n        <div onMouseEnter={() => setIsShown(true)} onMouseLeave={() => setIsShown(false)} className=\"tc bg-light-green dib br3 pa3 ma2  bw2 shadow-5\">\r\n            <div className=\"flex\">\r\n                <div>\r\n                    <img alt=\"robots\" src={`https://robohash.org/${id}.png?size=200x200`}/>\r\n                    <h4>{name}</h4>\r\n                    <p>{email}</p>\r\n                </div>\r\n\r\n                {isShown && (\r\n                    <div className=\"tl f6 pa3\">\r\n                        {/* <p style={{color: \"#9EEBCF\"}}>.</p> */}\r\n                        <p className=\"b mb1\">Company</p>\r\n                        <p className=\"ma0\">{company.name}</p>\r\n                        <p className=\"ma0\">{company.bs}</p>\r\n                        <p className=\"ma0\">{phone}</p>\r\n                        <a className=\"ma0\" href={window.location.href}>{website}</a>\r\n                        <p className=\"b mb1\">Address</p>\r\n                        <p className=\"ma0\">{address.street}</p>\r\n                        <p className=\"ma0\">{address.suite}</p>\r\n                        <p className=\"ma0\">{address.city}</p>\r\n                        <p className=\"ma0\">{address.zipcode}</p>\r\n\r\n\r\n                    </div>\r\n                )}\r\n                {/* {!isShown && (\r\n                    <>\r\n                        <p style={{color: \"#9EEBCF\"}}>.</p>\r\n                        <p style={{color: \"#9EEBCF\"}}>.</p>\r\n                    </>\r\n                )} */}\r\n            </div>\r\n        </div>\r\n    );\r\n    // const [isShown, setIsShown] = useState(false);\r\n    // return (\r\n    //     <div onMouseEnter={() => setIsShown(true)} onMouseLeave={() => setIsShown(false)} className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n    //         <img alt=\"robots\" src={`https://robohash.org/${id}.png?size=200x200`}/>\r\n    //         <>\r\n    //             <h4>{name}</h4>\r\n    //             <p>{email}</p>\r\n    //             {isShown && (\r\n    //                     <p>{website}</p>\r\n    //             )}\r\n    //         </>\r\n    //     </div>\r\n    // );\r\n}\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card.js\";\r\n// import { robots } from \"./robots.js\"; //deleted since in the 2nd way [on line 26 of index.js] we import {robots} to index.js\r\n\r\n//! 1st way - w/o destructuring\r\n// const CardList = (props) => {\r\n//     return (\r\n//         <div>\r\n//             <React.StrictMode>\r\n//                 <Card id={props.robots[0].id} name={props.robots[0].name} email={props.robots[0].email}/>\r\n//                 <Card id={props.robots[1].id} name={props.robots[1].name} email={props.robots[1].email}/>\r\n//                 <Card id={props.robots[2].id} name={props.robots[2].name} email={props.robots[2].email}/>\r\n//             </React.StrictMode>\r\n//         </div>\r\n//     );\r\n// }\r\n// export default CardList;\r\n\r\n//! 2nd way - w/ destructuring\r\n// const CardList = (props) => {\r\n//     const {robots} = props;\r\n//     return (\r\n//         <div>\r\n//             <React.StrictMode>\r\n//                 <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n//                 <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n//                 <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n//             </React.StrictMode>\r\n//         </div>\r\n//     );\r\n// }\r\n// export default CardList;\r\n\r\n//! 3rd way - w/ destructuring in the function props\r\n// const CardList = ({robots}) => {\r\n//     return (\r\n//         <div>\r\n//             <React.StrictMode>\r\n//                 <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n//                 <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n//                 <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n//             </React.StrictMode>\r\n//         </div>\r\n//     );\r\n// }\r\n// export default CardList;\r\n\r\n//! looping over the robots with .map()\r\n// const CardList = ({robots}) => {\r\n//     const cardsArray = robots.map((val, i) => {\r\n//         return ( \r\n//             <Card \r\n//                 key={i} \r\n//                 id={robots[i].id} \r\n//                 name={robots[i].name} \r\n//                 email={robots[i].email}\r\n//             />\r\n//         )\r\n//     });\r\n\r\n//     return (\r\n//         <div>\r\n//             <React.StrictMode>\r\n//                 {cardsArray}    \r\n//             </React.StrictMode>\r\n//         </div>\r\n//     ); \r\n// }\r\n// export default CardList;\r\n\r\n//! looping over the robots with .map() simplified\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div>\r\n            <React.StrictMode>\r\n                {\r\n                    robots.map((val, i) => {\r\n                        return ( \r\n                            <Card \r\n                                key={i} \r\n                                id={robots[i].id} \r\n                                name={robots[i].name} \r\n                                email={robots[i].email}\r\n                                phone={robots[i].phone}\r\n                                website={robots[i].website}\r\n                                company={robots[i].company}\r\n                                address={robots[i].address}\r\n                            />\r\n                        )\r\n                    })\r\n                }                \r\n            </React.StrictMode>\r\n        </div>\r\n    ); \r\n}\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>    \r\n    )\r\n};\r\nexport default SearchBox;","import React from \"react\";\r\nimport \"./Scroll.css\";\r\n\r\nconst Scroll = (props) => {\r\n    // console.log(props);\r\n    return (\r\n        <div className=\"removeScrollBar\" style={{overflowY: \"scroll\", height: \"900px\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from \"react\";\r\n// import {robots} from \"../robots.js\";\r\nimport CardList from \"../components/CardList.js\";\r\nimport SearchBox from \"../components/SearchBox.js\";\r\nimport Scroll from \"../components/Scroll.js\";\r\nimport \"./App.css\"\r\n\r\n//! adding the API to get fake users and adding the Scroll component\r\nclass App extends Component {\r\n    constructor () {\r\n        super ()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: \"\"\r\n        }\r\n        // console.log(0, \"constructor\");\r\n    };\r\n\r\n    componentDidMount () {\r\n        fetch (\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(response => {return response.json()})\r\n            .then(users => {this.setState({robots: users})});\r\n        // this.setState({robots: robots});\r\n        // console.log(1, \"componentDidMount\");\r\n        console.log(\"Happy you made it here, welcome :)\")\r\n    };\r\n\r\n    onSearchChange = (event) => { // if passed here without \"=\" and \"=>\" \"this\" will belong to the function; if with \"=\" and \"=>\" - \"this\" belongs to the master object\r\n        // console.log(event.target.value);\r\n        this.setState({searchfield: event.target.value});\r\n    };\r\n\r\n    render () {\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return (robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()) || \r\n            robots.email.toLowerCase().includes(this.state.searchfield.toLowerCase()));\r\n        });\r\n        // console.log(2, \"render\");\r\n        // console.log(filteredRobots);\r\n        if (this.state.robots.length === 0) {\r\n            return <h2 className=\"tc\">API call returned empty. Seems like the source updated the data structure and I have to update the App.</h2>\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    {/* <CardList robots={this.state.robots}/> */}\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    };\r\n};\r\nexport default App;\r\n\r\n// //! before adding the \"state\" to connect the two children of App: SearchBox and CardList\r\n// import React from \"react\";\r\n// import CardList from \"./CardList.js\";\r\n// import {robots} from \"./robots.js\";\r\n// import SearchBox from \"./SearchBox.js\"\r\n\r\n// const App = () => {\r\n//     return (\r\n//         <div className=\"tc\">\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox />\r\n//             <CardList robots={robots}/>\r\n//         </div>\r\n//     );\r\n// };\r\n// export default App;\r\n\r\n// //! adding the \"state\" to connect the two children of App: SearchBox and CardList\r\n// import React, {Component} from \"react\";\r\n// import {robots} from \"./robots.js\";\r\n// import CardList from \"./CardList.js\";\r\n// import SearchBox from \"./SearchBox.js\";\r\n// import \"./App.css\"\r\n\r\n// class App extends Component {\r\n//     constructor () {\r\n//         super ()\r\n//         this.state = {\r\n//             robots: robots,\r\n//             searchfield: \"\"\r\n//         }\r\n//     }\r\n\r\n//     onSearchChange = (event) => { // if passed here without \"=\" and \"=>\" \"this\" will belong to the function; if with \"=\" and \"=>\" - \"this\" belongs to the master object\r\n//         // console.log(event.target.value);\r\n//         this.setState({searchfield: event.target.value});\r\n//     }\r\n\r\n//     render () {\r\n//         const filteredRobots = this.state.robots.filter(robots => {\r\n//             return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n//         });\r\n//         // console.log(filteredRobots);\r\n//         return (\r\n//             <div className=\"tc\">\r\n//                 <h1>RoboFriends</h1>\r\n//                 <SearchBox searchChange={this.onSearchChange} />\r\n//                 {/* <CardList robots={this.state.robots}/> */}\r\n//                 <CardList robots={filteredRobots}/>\r\n//             </div>\r\n//         )\r\n//     }\r\n// };\r\n// export default App;","//! default assets after deleting the stuff we dont need for the project\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n//! imported \"tachyons\", a bootstrap-like library for React+CSS\nimport \"tachyons\";\n\n//! imported the App component (final layer) that will be a parrent of CardList and all the rest\nimport App from \"./containers/App.js\";\n\n//! Everything is imported in App\nReactDOM.render(\n  <div>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n//! deleted default assets\n// import App from './App.js';\n// import Hello from './Hello.js';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Hello greeting={\"Hello React Ninja\"}/>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// ReactDOM.render(\n//   <h1>Hello World</h1>,\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n//! imports before creating the CardList component: to clean up index.js (created the CardList component and gave it all the html inputs)\n// //? imported the Card component\n// import Card from \"./Card.js\";\n\n// //? imported the robots object\n// import { robots } from \"./robots.js\";\n\n// ReactDOM.render(\n//   <div>\n//       <React.StrictMode>\n//           <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n//           <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n//           <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n//       </React.StrictMode>\n//   </div>,\n//   document.getElementById('root')\n// );\n\n//! state before creating the App component\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import * as serviceWorker from './serviceWorker';\n\n// //? imported \"tachyons\", a bootstrap-like library for React+CSS\n// import \"tachyons\";\n\n// //? imported the robots object\n// import {robots} from \"./robots.js\"; \n\n// //? imported the CardList component that will be a parrent of Card\n// import CardList from \"./CardList.js\";\n\n// //? 1st way: { robots } is imported into CardList directly\n// // ReactDOM.render(\n// //   <div>\n// //     <React.StrictMode>\n// //       <CardList />\n// //     </React.StrictMode>\n// //   </div>,\n// //   document.getElementById('root')\n// // );\n\n// //? 2nd way: { robots } is imported here and passed as props to CardList\n// ReactDOM.render(\n//   <div>\n//     <React.StrictMode>\n//       <App />\n//     </React.StrictMode>\n//   </div>,\n//   document.getElementById('root')\n// );"],"sourceRoot":""}